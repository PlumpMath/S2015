.TH crlisp 1 "January 2015" "CMSC 431" "User Manuals"
.
.SH NAME
crlisp \- A crappy Lisp dialect created for CMSC 431.
.
.SH DESCRIPTION
This language resembles a simple Lisp. This language is compiled
to the x86_64 assembly language with the 
.B Proj1
compiler, from which an executable program can be assembled and linked using
.BR nasm (1)
and 
.BR gcc (1)
respectively.

.P 
The language currently performs integer and floating-point calculations,
variable declarations and printing of expressions and variables. Operators must
precede operands and be surrounded by matching sets of parentheses. 
.
.SH LANGUAGE
.SS Special Forms
The following forms are language primitives, and support integer and
floating-point operands.
.TP
(def label value)
Defines a variable with the given value. The label must be a string of
uppercase or lowercase characters, with underscores allowed as well. Values can
be raw integers, floating-point numbers, expressions, or other previously
declared variables.
.TP
(print x)
Prints the value of a variable or expression without a newline. x can be a
defined variable or an expression. If a non-defined variable is passed, this
throws an error.
.TP
(println x)
Similar to the print form, but adds a newline character to the end. 
.SS Mathematical Operations
The following mathematical operations are supported in decreasing order of 
precedence. Expressions may be constructed from signed 64 bit integers, or
signed 64 bit floating-point values. The two cannot be mixed.
.TP
(expression)
Parentheses. Encapsulates expressions externally. Internally, override 
precedence of operators outside the parentheses. NOTE: These are needed
around the entirety of the expression, but only needed internally for
clarity. Ex. '+ 1 2' will not compile, but '(+ 1 2)' will. 
.TP
^ expression expression
Integer exponentiation. Returns 1 if exponent is less than 1. 
.TP
-expression
Negation. 
.TP
* expression expression
Multiplication. Same precedence as division and modulus.
.TP
/ expression expression
Division. Same precedence as multiplication and modulus.
.TP
% expression expression
Modulus. Same precedence as multiplication and division.
.TP 
+ expression expression
Addition. Same precedence as subtraction.
.TP
- expression expression
Subtraction. Same precedence as addition.
.
.SH LIMITATIONS
.IP \(bu
A newline is required after the mathematical expression. 
.IP \(bu
Currently, integer and floating-point overflow is not handled. Need to add
handling for this.
.
.SH AUTHOR
Jeremy Neal <jneal2@umbc.edu>
